# ############################################################################
# Model: E2E ST with Conformer from ESPnet
# Encoder: Conformer Encoder
# Decoder: Transformer Decoder beamsearch
# Tokens: BPE
# losses: CTC + KLdiv (Label Smoothing loss)
# Training: Fisher-Callhome
# Authors: YAO-FEI, CHENG
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made
# The original recipe is from ESPnet:
# https://github.com/espnet/espnet/blob/master/egs/fisher_callhome_spanish/st1/conf/tuning/train_pytorch_conformer.yaml

debug: False
seed: 8886
num_workers: 8
__set_seed: !apply:torch.manual_seed [!ref <seed>]
output_folder: !ref results/allost_espnet_mid_sp_lr_2.5_both_fusion/<seed>
ckpt_interval_minutes: 15 # save checkpoint every N min
bleu_file: !ref <output_folder>/bleu.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Data files

data_folder: /mnt/md0/user_jamfly/sb_data/Fisher_data_mid #!PLACEHOLDER # Folder of the files generated by the preparation script
tokenizer_file: ../../Tokenizer/save/1000_bpe.model # !PLACEHOLDER # .model file corresponding to the Tokenizer model
phone_tokenizer_file: ../../Tokenizer/save_phone/1000_bpe.model # !PLACEHOLDER # .model file corresponding to the Tokenizer model


# Tokenier initialization
tokenizer: !new:sentencepiece.SentencePieceProcessor
phone_tokenizer: !new:sentencepiece.SentencePieceProcessor

# Pretrain the tokenizer
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: ./tokenizer
    loadables:
        tokenizer: !ref <tokenizer>
    paths:
        tokenizer: !ref <tokenizer_file>

phone_pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
    collect_in: ./phone_tokenizer
    loadables:
        tokenizer: !ref <phone_tokenizer>
    paths:
        tokenizer: !ref <phone_tokenizer_file>

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# Features
sample_rate: 16000
n_fft: 400
n_mels: 80

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

speed_perturb: !new:speechbrain.processing.speech_augmentation.SpeedPerturb
    orig_freq: !ref <sample_rate>
    speeds: [90, 100, 110]

# Trainer settings
number_of_epochs: 50
valid_search_eopch: 100
batch_size: 16
gradient_accumulation: 8
gradient_clipping: 5.0
loss_reduction: batchmean
sorting: random

# stages related parameters
stage_one_epochs: 100 # not gonna changing optimizer in this recipe
lr_adam: 2.5
lr_sgd: 0.000025

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>

valid_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>

test_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: !ref <num_workers>

####################### Model parameters ###########################
# Transformer
d_model: 256
nhead: 4
num_encoder_layers: 12
num_decoder_layers: 6
num_auxiliary_encoder_layers: 6
d_ffn: 2048
transformer_dropout: 0.3
activation: !name:torch.nn.GELU
output_neurons: 1000
vocab_size: 1000
kernel_size: 15

# Outputs
blank_index: 0
label_smoothing: 0.3
pad_index: 0
bos_index: 1
eos_index: 2
unk_index: 0

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_search_interval: !ref <valid_search_eopch>
valid_beam_size: 10
test_beam_size: 10

# AlloST fusion related configuration
is_encoder_fusion: True
is_encoder_share_weights: False
decoder_fusion_type: stacked

Transformer: !new:speechbrain.lobes.models.AlloST.ESPnetAlloST.E2E # yamllint disable-line rule:line-length
    idim: !ref <n_mels>
    odim: !ref <vocab_size>
    adim: !ref <d_model>
    phone_dim: 1000
    aheads: !ref <nhead>
    wshare: 4
    ldconv_encoder_kernel_length: "21_23_25_27_29_31_33_35_37_39_41_43"
    ldconv_usebias: False
    eunits: !ref <d_ffn>
    elayers: !ref <num_encoder_layers>
    alayers: !ref <num_auxiliary_encoder_layers>
    transformer_input_layer: "conv2d"
    transformer_encoder_selfattn_layer_type: "rel_selfattn"
    transformer_decoder_selfattn_layer_type: "selfattn"
    ldconv_decoder_kernel_length: "11_13_15_17_19_21"
    dunits: !ref <d_ffn>
    dlayers: !ref <num_decoder_layers>
    dropout_rate: !ref <transformer_dropout>
    transformer_encoder_pos_enc_layer_type: "rel_pos"
    transformer_encoder_activation_type: "swish"
    macaron_style: True
    use_cnn_module: True
    cnn_module_kernel: !ref <kernel_size>
    encoder_fusion: !ref <is_encoder_fusion>
    encoder_share_weights: !ref <is_encoder_share_weights>
    decoder_fusion_type: !ref <decoder_fusion_type>
    sos: !ref <bos_index>
    eos: !ref <eos_index>
    ignore_id: !ref <pad_index>
    auxiliary_ignore_id: !ref <pad_index>

modules:
    Transformer: !ref <Transformer>

model: !new:torch.nn.ModuleList
    - [!ref <Transformer>]

# define two optimizers here for two-stage training
Adam: !name:torch.optim.Adam
    lr: 0
    betas: (0.9, 0.98)
    eps: 0.000000001

SGD: !name:torch.optim.SGD
    lr: !ref <lr_sgd>
    momentum: 0.99
    nesterov: True

seq_cost: !new:espnet.nets.pytorch_backend.transformer.label_smoothing_loss.LabelSmoothingLoss
    size: !ref <vocab_size>
    padding_idx: !ref <pad_index>
    smoothing: !ref <label_smoothing>
    normalize_length: False

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr_adam>
    n_warmup_steps: 35000
    model_size: !ref <d_model>

# Checkpoint setting
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>

bleu_computer: !name:speechbrain.utils.bleu.BLEUStats
    merge_words: False
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats
