# ################################
# Model: SepFormer for source separation
# https://arxiv.org/abs/2010.13154
# Dataset : WSJ0-2mix and WSJ0-3mix
# ################################
# Basic parameters
# Seed needs to be set at top of yaml, before objects with parameters are made
#
seed: 1234
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# Data params

# e.g. '/yourpath/wsj0-mix/2speakers'
# end with 2speakers for wsj0-2mix or 3speakers for wsj0-3mix
data_folder: /mnt/md0/user_fal1210/Corpora_30/DPFN
dvector_folder: /mnt/md0/user_fal1210/SLAM/speechbrain/recipes/VoxCeleb_dpfn/SpeakerRec/results/dpfn/xvectors_pretrain/save
csv_folder: null # /mnt/md0/user_fal1210/SLAM/speechbrain/recipes/WHAMandWHAMR/separation/results/dprnn-wham_small/1234/save
weight_folder: /mnt/md0/user_fal1210/SLAM/speechbrain/recipes/WHAMandWHAMR/separation/results/dprnn-wham/1234/save/CKPT+2022-05-23+22-05-41+00

# the path for wsj0/si_tr_s/ folder -- only needed if dynamic mixing is used
# e.g. /yourpath/wsj0-processed/si_tr_s/
base_folder_dm: /yourpath/wsj0-processed/si_tr_s/

experiment_name: dpfn_wsj0_oracle
output_folder: !ref results/<experiment_name>/<seed>
train_log: !ref <output_folder>/train_log.txt
save_folder: !ref <output_folder>/save
train_data: !ref <save_folder>/wsj_tr.csv
valid_data: !ref <save_folder>/wsj_cv.csv
test_data: !ref <save_folder>/wsj_tt.csv
skip_prep: True


# Experiment params
auto_mix_prec: False # Set it to True for mixed precision
test_only: True
num_spks: 2 # set to 3 for wsj0-3mix
progressbar: True
save_audio: True # Save estimated sources on disk
n_audio_to_save: 50
sample_rate: 8000
total_spk: 101
cond_group: 2 # 1 # 2
emb_dim: 128
copy_mix: True
mask_end: False
output_layer: True
use_pretrain_vec: False
loss_weight: 0 # 0.00001 # weight of spk loss
loss_kind: spk # l1, mse, spk, snr
loss_pit: True
init_weight: False
valid_train: False
valid_test: True

# Training parameters
N_epochs: 150
batch_size: 4
lr: 0.00015
gradient_accumulation: 1
clip_grad_norm: 5
loss_upper_lim: 999999  # this is the upper limit for an acceptable loss
# if True, the training sequences are cut to a specified length
limit_training_signal_len: True
# this is the length of sequences if we choose to limit
# the signal length of training sequences
training_signal_len: 24000

# Set it to True to dynamically create mixtures at training time
dynamic_mixing: False

# Parameters for data augmentation
use_wavedrop: False
use_speedperturb: False
use_speedperturb_sameforeachsource: False
use_rand_shift: False
rand_choice: True
rand_ori_rate: 1.0
min_shift: -8000
max_shift: 8000

speedperturb: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    perturb_prob: 1.0
    drop_freq_prob: 0.0
    drop_chunk_prob: 0.0
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

wavedrop: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    perturb_prob: 0.0
    drop_freq_prob: 1.0
    drop_chunk_prob: 1.0
    sample_rate: !ref <sample_rate>

# loss thresholding -- this thresholds the training loss
threshold_byloss: True
threshold: -30

# Encoder parameters
N_encoder_out: 256
out_channels: 256
kernel_size: 16
kernel_stride: 8

# Dataloader options
dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: 8

testloader_opts:
    batch_size: 1
    num_workers: 8

# Specifying the network
Encoder: !new:speechbrain.lobes.models.dpfn.Encoder
    kernel_size: !ref <kernel_size>
    out_channels: !ref <N_encoder_out>


intra: !new:speechbrain.lobes.models.dpfn.SBRNNBlock
    num_layers: 1
    input_size: !ref <out_channels>
    hidden_channels: !ref <out_channels>
    cond_group: !ref <cond_group>
    dropout: 0
    bidirectional: True
    mask_end: !ref <mask_end>

inter: !new:speechbrain.lobes.models.dpfn.SBRNNBlock
    num_layers: 1
    input_size: !ref <out_channels>
    hidden_channels: !ref <out_channels>
    cond_group: !ref <cond_group>
    dropout: 0
    bidirectional: True
    mask_end: !ref <mask_end>

MaskNet: !new:speechbrain.lobes.models.dpfn.DualPath_Model
    num_spks: !ref <num_spks>
    in_channels: !ref <N_encoder_out>
    out_channels: !ref <out_channels>
    num_layers: 6
    K: 250
    intra_model: !ref <intra>
    inter_model: !ref <inter>
    norm: ln
    cond_group: !ref <cond_group>
    dim_cond: !ref <emb_dim>
    use_adain: False
    use_affine: True
    output_layer: !ref <output_layer>
    dropout: 0.1
    linear_layer_after_inter_intra: False
    skip_around_intra: True
    cond_weight_exp: False
    skip_intra_sqrt: False
    copy_mix: !ref <copy_mix>
    mask_end: !ref <mask_end>

Decoder: !new:speechbrain.lobes.models.dpfn.Decoder
    in_channels: !ref <N_encoder_out>
    out_channels: 1
    kernel_size: !ref <kernel_size>
    stride: !ref <kernel_stride>
    bias: False

SpkNet: !new:speechbrain.lobes.models.dpfn.SpkResNet_SE
    layers: [3, 3, 3, 3]
    num_filters: [32, 64, 128, 256]
    encoder_out: !ref <N_encoder_out>
    z_channels: !ref <emb_dim>
    pre_encoding: encoder
    pooling_param:
        hidden_dim: null
        attention: False
        statistic: False

AutoEncoder: !new:speechbrain.lobes.models.resnetSE.AutoEncoder_SE
    layers: [3, 3, 3, 3]
    num_filters: [256, 128, 64, 32]
    encoder_out: !ref <N_encoder_out>

# SpkNet: !new:speechbrain.lobes.models.dpfn.SpkResNet
#     in_channels: [256, 256]
#     out_channels: [256, 128]
#     downsample_scales: [1, 1]
#     kernel_size: 3
#     z_channels: !ref <emb_dim>
#     dilation: False
#     leaky_relu: True
#     dropout: 0.1
#     stack_kernel_size: 3
#     stack_layers: 1
#     nin_layers: 1
#     stacks: [3, 3]
#     use_weight_norm: True
#     use_causal_conv: False
#     pre_encoding: encoder
#     pooling_param:
#         hidden_dim: null
#         attention: False
#         statistic: False

# AutoEncoder: !new:speechbrain.lobes.models.resnet.ResNet
#     in_channels: [128, 256]
#     out_channels: [256, 256]
#     downsample_scales: [1, 1]
#     kernel_size: 3
#     z_channels: 256
#     dilation: False
#     leaky_relu: True
#     dropout: 0.1
#     stack_kernel_size: 3
#     stack_layers: 1
#     nin_layers: 1
#     stacks: [3, 3]
#     use_weight_norm: True
#     use_causal_conv: False

SpkClassifier: !new:speechbrain.lobes.models.dpfn.SpkClassifier
    emb_dim: !ref <emb_dim>
    total_spk: !ref <total_spk>

optimizer: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0

loss: !name:speechbrain.nnet.losses.dpfn_loss

lr_scheduler: !new:speechbrain.nnet.schedulers.ReduceLROnPlateau
    factor: 0.5
    patience: 2
    dont_halve_until_epoch: 85

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <N_epochs>

modules:
    encoder: !ref <Encoder>
    decoder: !ref <Decoder>
    masknet: !ref <MaskNet>
    spknet: !ref <SpkNet>
    autoencoder: !ref <AutoEncoder>
    spkclassifier: !ref <SpkClassifier>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        encoder: !ref <Encoder>
        decoder: !ref <Decoder>
        masknet: !ref <MaskNet>
        spknet: !ref <SpkNet>
        autoencoder: !ref <AutoEncoder>
        spkclassifier: !ref <SpkClassifier>
        counter: !ref <epoch_counter>
        lr_scheduler: !ref <lr_scheduler>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>
